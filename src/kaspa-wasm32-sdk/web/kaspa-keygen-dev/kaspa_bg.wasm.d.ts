/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const version: () => [number, number];
export const __wbg_keypair_free: (a: number, b: number) => void;
export const keypair_get_public_key: (a: number) => [number, number];
export const keypair_get_private_key: (a: number) => [number, number];
export const keypair_get_xonly_public_key: (a: number) => any;
export const keypair_toAddress: (a: number, b: any) => [number, number, number];
export const keypair_toAddressECDSA: (a: number, b: any) => [number, number, number];
export const keypair_random: () => [number, number, number];
export const keypair_fromPrivateKey: (a: number) => [number, number, number];
export const __wbg_privatekeygenerator_free: (a: number, b: number) => void;
export const privatekeygenerator_new: (a: any, b: number, c: bigint, d: number) => [number, number, number];
export const privatekeygenerator_receiveKey: (a: number, b: number) => [number, number, number];
export const privatekeygenerator_changeKey: (a: number, b: number) => [number, number, number];
export const __wbg_publickey_free: (a: number, b: number) => void;
export const publickey_try_new: (a: number, b: number) => [number, number, number];
export const publickey_toString: (a: number) => [number, number];
export const publickey_toAddress: (a: number, b: any) => [number, number, number];
export const publickey_toAddressECDSA: (a: number, b: any) => [number, number, number];
export const publickey_toXOnlyPublicKey: (a: number) => number;
export const publickey_fingerprint: (a: number) => any;
export const __wbg_xonlypublickey_free: (a: number, b: number) => void;
export const xonlypublickey_try_new: (a: number, b: number) => [number, number, number];
export const xonlypublickey_toString: (a: number) => [number, number];
export const xonlypublickey_toAddress: (a: number, b: any) => [number, number, number];
export const xonlypublickey_toAddressECDSA: (a: number, b: any) => [number, number, number];
export const xonlypublickey_fromAddress: (a: number) => [number, number, number];
export const __wbg_xprv_free: (a: number, b: number) => void;
export const xprv_try_new: (a: any) => [number, number, number];
export const xprv_fromXPrv: (a: number, b: number) => [number, number, number];
export const xprv_deriveChild: (a: number, b: number, c: number) => [number, number, number];
export const xprv_derivePath: (a: number, b: any) => [number, number, number];
export const xprv_intoString: (a: number, b: number, c: number) => [number, number, number, number];
export const xprv_toString: (a: number) => [number, number, number, number];
export const xprv_toXPub: (a: number) => [number, number, number];
export const xprv_toPrivateKey: (a: number) => [number, number, number];
export const xprv_xprv: (a: number) => [number, number, number, number];
export const xprv_privateKey: (a: number) => [number, number];
export const xprv_depth: (a: number) => number;
export const xprv_parentFingerprint: (a: number) => [number, number];
export const xprv_childNumber: (a: number) => number;
export const xprv_chainCode: (a: number) => [number, number];
export const __wbg_xpub_free: (a: number, b: number) => void;
export const xpub_try_new: (a: number, b: number) => [number, number, number];
export const xpub_deriveChild: (a: number, b: number, c: number) => [number, number, number];
export const xpub_derivePath: (a: number, b: any) => [number, number, number];
export const xpub_intoString: (a: number, b: number, c: number) => [number, number, number, number];
export const xpub_toPublicKey: (a: number) => number;
export const xpub_xpub: (a: number) => [number, number, number, number];
export const xpub_depth: (a: number) => number;
export const xpub_parentFingerprint: (a: number) => [number, number];
export const xpub_childNumber: (a: number) => number;
export const xpub_chainCode: (a: number) => [number, number];
export const __wbg_derivationpath_free: (a: number, b: number) => void;
export const derivationpath_new: (a: number, b: number) => [number, number, number];
export const derivationpath_isEmpty: (a: number) => number;
export const derivationpath_length: (a: number) => number;
export const derivationpath_parent: (a: number) => number;
export const derivationpath_push: (a: number, b: number, c: number) => [number, number];
export const derivationpath_toString: (a: number) => [number, number];
export const __wbg_privatekey_free: (a: number, b: number) => void;
export const privatekey_try_new: (a: number, b: number) => [number, number, number];
export const privatekey_toString: (a: number) => [number, number];
export const privatekey_toKeypair: (a: number) => [number, number, number];
export const privatekey_toPublicKey: (a: number) => [number, number, number];
export const privatekey_toAddress: (a: number, b: any) => [number, number, number];
export const privatekey_toAddressECDSA: (a: number, b: any) => [number, number, number];
export const __wbg_publickeygenerator_free: (a: number, b: number) => void;
export const publickeygenerator_fromXPub: (a: any, b: number) => [number, number, number];
export const publickeygenerator_fromMasterXPrv: (a: any, b: number, c: bigint, d: number) => [number, number, number];
export const publickeygenerator_receivePubkeys: (a: number, b: number, c: number) => [number, number, number];
export const publickeygenerator_receivePubkey: (a: number, b: number) => [number, number, number];
export const publickeygenerator_receivePubkeysAsStrings: (a: number, b: number, c: number) => [number, number, number];
export const publickeygenerator_receivePubkeyAsString: (a: number, b: number) => [number, number, number, number];
export const publickeygenerator_receiveAddresses: (a: number, b: any, c: number, d: number) => [number, number, number];
export const publickeygenerator_receiveAddress: (a: number, b: any, c: number) => [number, number, number];
export const publickeygenerator_receiveAddressAsStrings: (a: number, b: any, c: number, d: number) => [number, number, number];
export const publickeygenerator_receiveAddressAsString: (a: number, b: any, c: number) => [number, number, number, number];
export const publickeygenerator_changePubkeys: (a: number, b: number, c: number) => [number, number, number];
export const publickeygenerator_changePubkey: (a: number, b: number) => [number, number, number];
export const publickeygenerator_changePubkeysAsStrings: (a: number, b: number, c: number) => [number, number, number];
export const publickeygenerator_changePubkeyAsString: (a: number, b: number) => [number, number, number, number];
export const publickeygenerator_changeAddresses: (a: number, b: any, c: number, d: number) => [number, number, number];
export const publickeygenerator_changeAddress: (a: number, b: any, c: number) => [number, number, number];
export const publickeygenerator_changeAddressAsStrings: (a: number, b: any, c: number, d: number) => [number, number, number];
export const publickeygenerator_changeAddressAsString: (a: number, b: any, c: number) => [number, number, number, number];
export const publickeygenerator_toString: (a: number) => [number, number, number, number];
export const __wbg_mnemonic_free: (a: number, b: number) => void;
export const mnemonic_constructor: (a: number, b: number, c: number) => [number, number, number];
export const mnemonic_validate: (a: number, b: number, c: number) => number;
export const mnemonic_entropy: (a: number) => [number, number];
export const mnemonic_set_entropy: (a: number, b: number, c: number) => void;
export const mnemonic_random: (a: number) => [number, number, number];
export const mnemonic_phrase: (a: number) => [number, number];
export const mnemonic_set_phrase: (a: number, b: number, c: number) => void;
export const mnemonic_toSeed: (a: number, b: number, c: number) => [number, number];
export const __wbg_transactionutxoentry_free: (a: number, b: number) => void;
export const __wbg_get_transactionutxoentry_amount: (a: number) => bigint;
export const __wbg_set_transactionutxoentry_amount: (a: number, b: bigint) => void;
export const __wbg_get_transactionutxoentry_scriptPublicKey: (a: number) => number;
export const __wbg_set_transactionutxoentry_scriptPublicKey: (a: number, b: number) => void;
export const __wbg_get_transactionutxoentry_blockDaaScore: (a: number) => bigint;
export const __wbg_set_transactionutxoentry_blockDaaScore: (a: number, b: bigint) => void;
export const __wbg_get_transactionutxoentry_isCoinbase: (a: number) => number;
export const __wbg_set_transactionutxoentry_isCoinbase: (a: number, b: number) => void;
export const __wbg_sighashtype_free: (a: number, b: number) => void;
export const __wbg_scriptpublickey_free: (a: number, b: number) => void;
export const __wbg_get_scriptpublickey_version: (a: number) => number;
export const __wbg_set_scriptpublickey_version: (a: number, b: number) => void;
export const scriptpublickey_constructor: (a: number, b: any) => [number, number, number];
export const scriptpublickey_script_as_hex: (a: number) => [number, number];
export const __wbg_networkid_free: (a: number, b: number) => void;
export const __wbg_get_networkid_type: (a: number) => number;
export const __wbg_set_networkid_type: (a: number, b: number) => void;
export const __wbg_get_networkid_suffix: (a: number) => number;
export const __wbg_set_networkid_suffix: (a: number, b: number) => void;
export const networkid_ctor: (a: any) => [number, number, number];
export const networkid_id: (a: number) => [number, number];
export const networkid_toString: (a: number) => [number, number];
export const networkid_addressPrefix: (a: number) => [number, number];
export const __wbg_hash_free: (a: number, b: number) => void;
export const hash_constructor: (a: number, b: number) => number;
export const hash_toString: (a: number) => [number, number];
export const rustsecp256k1_v0_10_0_context_create: (a: number) => number;
export const rustsecp256k1_v0_10_0_context_destroy: (a: number) => void;
export const rustsecp256k1_v0_10_0_default_illegal_callback_fn: (a: number, b: number) => void;
export const rustsecp256k1_v0_10_0_default_error_callback_fn: (a: number, b: number) => void;
export const __wbg_address_free: (a: number, b: number) => void;
export const address_constructor: (a: number, b: number) => number;
export const address_validate: (a: number, b: number) => number;
export const address_toString: (a: number) => [number, number];
export const address_version: (a: number) => [number, number];
export const address_prefix: (a: number) => [number, number];
export const address_set_setPrefix: (a: number, b: number, c: number) => void;
export const address_payload: (a: number) => [number, number];
export const address_short: (a: number, b: number) => [number, number];
export const initWASM32Bindings: (a: any) => [number, number];
export const initConsolePanicHook: () => void;
export const initBrowserPanicHook: () => void;
export const presentPanicHookLogs: () => void;
export const defer: () => any;
export const __wbg_aborted_free: (a: number, b: number) => void;
export const __wbg_abortable_free: (a: number, b: number) => void;
export const abortable_new: () => number;
export const abortable_isAborted: (a: number) => number;
export const abortable_abort: (a: number) => void;
export const abortable_check: (a: number) => [number, number];
export const abortable_reset: (a: number) => void;
export const setLogLevel: (a: any) => void;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __externref_table_dealloc: (a: number) => void;
export const __wbindgen_start: () => void;
